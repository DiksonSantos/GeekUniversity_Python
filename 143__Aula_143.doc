"""
Quer dizer que:
O proprio teste é uma documentação para o código\projeto.

Para rodar um Doctest:

python -m doctest -v nome_do_programinha.py

SAIDA DO TESTE DESTE CÓDIGO AQUI:

5
Trying:
    soma(2, 2)
Expecting:
    4
ok
1 items had no tests:
    143_Doctests
1 items passed all tests:
   1 tests in 143_Doctests.soma
1 tests in 2 items.
1 passed and 0 failed.
Test passed.

"""

def soma(a, b):
    """Soma duas coisas
    >>> soma(2, 2)
    4
    >>> soma(3, 4)
    100
    """
    return a + b


conc = soma(1, 4)
print(conc)
"""
Neste caso Um teste passa e Um falha
"""

#___________________________________________________________________________________



def duplicar_valores(valores):
    """Duplica Os Valores Numa Lista
    >>> duplicar_valores([1, 2, 3, 4])
    [2, 4, 6, 8]

    >>> duplicar_valores([])
    []

    >>> duplicar_valores(['a','b','c'])
    ['aa', 'bb', 'cc']

    >>> duplicar_valores([True, None])
    Traceback (most recent call last):
    ...
    TypeError: unsupported operand type(s) for *: 'int' and 'NoneType'
    """
    #pass #Falha todos
    #return [] #Falhou 3 de 4
    return [2 * elemento for elemento in valores] #Esta é uma ListComprehension .Todos Passaram OK

"""
Uma deficienci deste tipo de teste é que -> Temos que colocar como resultado esperado
exatamente o que seria ou será mostrado se/quando fazemos o teste no Terminal Python.
"""

___________________________________________________________________________________



def fala_oi():
    """
    Fala Oi
    >>> fala_oi()
    'oi'
    """
    return "oi"

#O lance desse código passar ou Não são as aspas Duplas ou simples, fique atento a isto.
objeto = fala_oi()
print(objeto)

_____________________________________________________________________________________

